# This is a collection of utilities used by the main CMake file

# Load the LLVM utilities
#
macro(loadLLVM)
  find_package(LLVM REQUIRED CONFIG)
  include_directories(${LLVM_INCLUDE_DIRS})
  add_definitions(${LLVM_DEFINITIONS})
  llvm_map_components_to_libnames(llvm_libs support core irreader)
  message(STATUS "Found LLVM ${LLVM_PACKAGE_VERSION}")
  message(STATUS "Using LLVMConfig.cmake in: ${LLVM_DIR}")
endmacro(loadLLVM)


# Transform source and test files into a format suitable for use with 
# Doxygen.
macro(transformDoxygen)
  add_custom_target(transformDoxygenSrcs
    COMMAND ${CMAKE_SOURCE_DIR}/bin/transformDoxygen ${CMAKE_SOURCE_DIR}/src ${CMAKE_SOURCE_DIR}/tests
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
    COMMENT "Transforming source and tests for API documentation with Doxygen" VERBATIM
  )
  add_dependencies(doc transformDoxygenSrcs )
endmacro(transformDoxygen)

# Load and Configure Doxygen
#
# add a target to generate API documentation with Doxygen
macro(configureDoxygen)
  find_package(Doxygen)
  if(DOXYGEN_FOUND)
    configure_file(
      ${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile.in 
      ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile
      @ONLY
    )
    file(MAKE_DIRECTORY 
      "${CMAKE_BINARY_DIR}/docs" 
      "${CMAKE_BINARY_DIR}/docs/api"
    )
    add_custom_target(doc
      ${DOXYGEN_EXECUTABLE} 
      ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile
      WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
      COMMENT "Generating API documentation with Doxygen" VERBATIM
    )
  endif(DOXYGEN_FOUND)
endmacro(configureDoxygen)

# DEFINE tests
#
function(defineTestsFor libraryName sourceDirectory
         includeDirectories testDirectories testLibraries)
  file(GLOB_RECURSE testSources 
    "${testDirectories}/*.h" 
    "${testDirectories}/*.c*"
  )
  add_executable("${libraryName}Tests" ${testSources})
  foreach(includeDir IN LISTS includeDirectories)
    target_compile_options("${libraryName}Tests"
      PRIVATE "-I${CMAKE_SOURCE_DIR}/${includeDir}")
  endforeach(includeDir)
  target_compile_options("${libraryName}Tests" 
    PRIVATE "-I${CMAKE_SOURCE_DIR}/${sourceDirectory}" "-Wall" "-std=c++11")
  target_link_libraries("${libraryName}Tests" ${libraryName})
  foreach(testLibrary IN LISTS testLibraries)
    target_link_libraries("${libraryName}Tests" ${testLibrary})
  endforeach(testLibrary)
  target_link_libraries("${libraryName}Tests" ${llvm_libs})
  add_test(${libraryName} "${libraryName}Tests")
endfunction(defineTestsFor)

# DEFINE library
#
function(defineLibrary libraryName sourceDirectory includeDirectories)
  file(GLOB_RECURSE librarySources
    "${sourceDirectory}/*.h"
    "${sourceDirectory}/*.c*"
  )
  add_library(${libraryName} ${librarySources})
  foreach(includeDir IN LISTS includeDirectories)
    target_compile_options(${libraryName} PRIVATE "-I${CMAKE_SOURCE_DIR}/${includeDir}")
  endforeach(includeDir)
#  target_compile_options(${libraryName} PRIVATE "-Wall" "-std=c++11")
endfunction(defineLibrary)

# DEFINE executable
#
function(defineExecutable executableName sourceDirectories libraries)
  file(GLOB_RECURSE executableSources
    "${sourceDirectories}/*.h"
    "${sourceDirectories}/*.c*"
  )
  add_executable(${executableName} 
    ${executableSources} 
  )
  target_link_libraries(${executableName} ${libraries})
  target_link_libraries(${executableName} ${llvm_libs})
endfunction(defineExecutable)

